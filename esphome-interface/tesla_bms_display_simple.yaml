esphome:
  name: tesla_bms_display
  friendly_name: Tesla BMS Display

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: 3.0.0

# Enable logging
logger:
  level: INFO
  logs:
    uart: DEBUG

# WiFi configuration
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "Tesla_BMS_Display_AP"
    password: "12345678"

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption_key

# Enable OTA updates
ota:
  password: !secret ota_password

# Enable web server
web_server:
  port: 80

# Time component for timestamps
time:
  - platform: sntp
    id: sntp_time

# UART for communication with Tesla BMS
uart:
  - id: tesla_bms_uart
    tx_pin: GPIO17
    rx_pin: GPIO16
    baud_rate: 115200
    data_bits: 8
    parity: NONE
    stop_bits: 1

# I2C for LCD display (JC3248W535C)
i2c:
  sda: GPIO21
  scl: GPIO22
  frequency: 400kHz

# LCD Display (JC3248W535C - typically uses ST7789 or similar)
display:
  - platform: st7789
    id: lcd_display
    width: 240
    height: 320
    rotation: 270
    data_pins: [GPIO23, GPIO19, GPIO18, GPIO5, GPIO4, GPIO2, GPIO1, GPIO0]
    dc_pin: GPIO15
    cs_pin: GPIO14
    reset_pin: GPIO13
    backlight_pin: GPIO12
    reset_duration: 100ms
    auto_clear_enabled: false

# Font definitions
font:
  - file: "fonts/OpenSans-Regular-12.pcf"
    id: font_small
    size: 12
  - file: "fonts/OpenSans-Bold-16.pcf"
    id: font_medium
    size: 16
  - file: "fonts/OpenSans-Bold-20.pcf"
    id: font_large
    size: 20

# Binary sensors for system status
binary_sensor:
  - platform: status
    name: "Tesla BMS Display Status"
    id: display_status

# Sensors for system parameters
sensor:
  # System parameters
  - platform: template
    name: "Number of BMBs"
    id: numbmbs
    unit_of_measurement: "boards"
    accuracy_decimals: 0
    
  - platform: template
    name: "Loop Counter"
    id: loopcnt
    unit_of_measurement: "count"
    accuracy_decimals: 0
    
  - platform: template
    name: "Loop State"
    id: loopstate
    unit_of_measurement: "state"
    accuracy_decimals: 0
    
  - platform: template
    name: "Cells Present"
    id: cellspresent
    unit_of_measurement: "cells"
    accuracy_decimals: 0
    
  - platform: template
    name: "Cells Balancing"
    id: cellsbalancing
    unit_of_measurement: "cells"
    accuracy_decimals: 0

  # Voltage statistics
  - platform: template
    name: "Cell Max Number"
    id: cellmax
    unit_of_measurement: "cell"
    accuracy_decimals: 0
    
  - platform: template
    name: "Cell Min Number"
    id: cellmin
    unit_of_measurement: "cell"
    accuracy_decimals: 0
    
  - platform: template
    name: "Max Voltage"
    id: umax
    unit_of_measurement: "mV"
    accuracy_decimals: 0
    
  - platform: template
    name: "Min Voltage"
    id: umin
    unit_of_measurement: "mV"
    accuracy_decimals: 0
    
  - platform: template
    name: "Voltage Delta"
    id: deltav
    unit_of_measurement: "mV"
    accuracy_decimals: 0
    
  - platform: template
    name: "DC Voltage"
    id: udc
    unit_of_measurement: "mV"
    accuracy_decimals: 0
    
  - platform: template
    name: "Average Voltage"
    id: uavg
    unit_of_measurement: "mV"
    accuracy_decimals: 0
    
  - platform: template
    name: "Charge Voltage Limit"
    id: chargevlim
    unit_of_measurement: "mV"
    accuracy_decimals: 0
    
  - platform: template
    name: "Discharge Voltage Limit"
    id: dischargevlim
    unit_of_measurement: "mV"
    accuracy_decimals: 0

  # Balance control
  - platform: template
    name: "Balance Status"
    id: balance
    unit_of_measurement: "status"
    accuracy_decimals: 0
    
  - platform: template
    name: "Cell V Max"
    id: cellvmax
    unit_of_measurement: "mV"
    accuracy_decimals: 0
    
  - platform: template
    name: "Cell V Min"
    id: cellvmin
    unit_of_measurement: "mV"
    accuracy_decimals: 0

  # Temperature parameters
  - platform: template
    name: "Chip Temperature"
    id: chipt0
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    
  - platform: template
    name: "Cell Temperature 0"
    id: cellt0_0
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    
  - platform: template
    name: "Cell Temperature 1"
    id: cellt0_1
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    
  - platform: template
    name: "Max Temperature"
    id: tempmax
    unit_of_measurement: "°C"
    accuracy_decimals: 1
    
  - platform: template
    name: "Min Temperature"
    id: tempmin
    unit_of_measurement: "°C"
    accuracy_decimals: 1

  # Chip voltages
  - platform: template
    name: "Chip V1"
    id: chipv1
    unit_of_measurement: "V"
    accuracy_decimals: 2
    
  - platform: template
    name: "Chip V2"
    id: chipv2
    unit_of_measurement: "V"
    accuracy_decimals: 2
    
  - platform: template
    name: "Chip V3"
    id: chipv3
    unit_of_measurement: "V"
    accuracy_decimals: 2
    
  - platform: template
    name: "Chip V4"
    id: chipv4
    unit_of_measurement: "V"
    accuracy_decimals: 2
    
  - platform: template
    name: "Chip V5"
    id: chipv5
    unit_of_measurement: "V"
    accuracy_decimals: 2
    
  - platform: template
    name: "Chip V6"
    id: chipv6
    unit_of_measurement: "V"
    accuracy_decimals: 2
    
  - platform: template
    name: "Chip V7"
    id: chipv7
    unit_of_measurement: "V"
    accuracy_decimals: 2
    
  - platform: template
    name: "Chip V8"
    id: chipv8
    unit_of_measurement: "V"
    accuracy_decimals: 2

  # Chip supplies
  - platform: template
    name: "Chip 1 5V"
    id: chip1_5v
    unit_of_measurement: "V"
    accuracy_decimals: 2
    
  - platform: template
    name: "Chip 2 5V"
    id: chip2_5v
    unit_of_measurement: "V"
    accuracy_decimals: 2

  # Cell counts per chip
  - platform: template
    name: "Chip 1 Cells"
    id: chip1cells
    unit_of_measurement: "cells"
    accuracy_decimals: 0
    
  - platform: template
    name: "Chip 2 Cells"
    id: chip2cells
    unit_of_measurement: "cells"
    accuracy_decimals: 0
    
  - platform: template
    name: "Chip 3 Cells"
    id: chip3cells
    unit_of_measurement: "cells"
    accuracy_decimals: 0
    
  - platform: template
    name: "Chip 4 Cells"
    id: chip4cells
    unit_of_measurement: "cells"
    accuracy_decimals: 0

# Switches for control
switch:
  - platform: template
    name: "Balance Control"
    id: balance_control
    optimistic: true
    restore_state: false

# Buttons for manual control
button:
  - platform: template
    name: "Refresh Parameters"
    id: refresh_params
    on_press:
      - uart.write:
          id: tesla_bms_uart
          data: "param list\n"
      
  - platform: template
    name: "Enable Balance"
    id: enable_balance
    on_press:
      - uart.write:
          id: tesla_bms_uart
          data: "balance on\n"
      
  - platform: template
    name: "Disable Balance"
    id: disable_balance
    on_press:
      - uart.write:
          id: tesla_bms_uart
          data: "balance off\n"

# UART text sensor for parsing responses
text_sensor:
  - platform: uart
    id: tesla_bms_response
    uart_id: tesla_bms_uart
    name: "Tesla BMS Response"
    on_value:
      then:
        - lambda: |-
            // Parse parameter responses
            std::string response = x.c_str();
            
            // Check for balance status
            if (response.find("Balance ENABLED") != std::string::npos) {
              id(balance).publish_state(1.0f);
            } else if (response.find("Balance DISABLED") != std::string::npos) {
              id(balance).publish_state(0.0f);
            }
            
            // Parse parameter lines (format: "param_name: value")
            size_t colon_pos = response.find(':');
            if (colon_pos != std::string::npos) {
              std::string param_name = response.substr(0, colon_pos);
              std::string value_str = response.substr(colon_pos + 1);
              
              // Trim whitespace
              param_name.erase(0, param_name.find_first_not_of(" \t"));
              param_name.erase(param_name.find_last_not_of(" \t") + 1);
              value_str.erase(0, value_str.find_first_not_of(" \t"));
              value_str.erase(value_str.find_last_not_of(" \t") + 1);
              
              // Convert to float and update appropriate sensor
              float value = atof(value_str.c_str());
              
              // Map parameter names to sensor IDs
              if (param_name == "numbmbs") id(numbmbs).publish_state(value);
              else if (param_name == "LoopCnt") id(loopcnt).publish_state(value);
              else if (param_name == "LoopState") id(loopstate).publish_state(value);
              else if (param_name == "CellsPresent") id(cellspresent).publish_state(value);
              else if (param_name == "CellsBalancing") id(cellsbalancing).publish_state(value);
              else if (param_name == "CellMax") id(cellmax).publish_state(value);
              else if (param_name == "CellMin") id(cellmin).publish_state(value);
              else if (param_name == "umax") id(umax).publish_state(value);
              else if (param_name == "umin") id(umin).publish_state(value);
              else if (param_name == "deltaV") id(deltav).publish_state(value);
              else if (param_name == "udc") id(udc).publish_state(value);
              else if (param_name == "uavg") id(uavg).publish_state(value);
              else if (param_name == "chargeVlim") id(chargevlim).publish_state(value);
              else if (param_name == "dischargeVlim") id(dischargevlim).publish_state(value);
              else if (param_name == "CellVmax") id(cellvmax).publish_state(value);
              else if (param_name == "CellVmin") id(cellvmin).publish_state(value);
              else if (param_name == "Chipt0") id(chipt0).publish_state(value);
              else if (param_name == "Cellt0_0") id(cellt0_0).publish_state(value);
              else if (param_name == "Cellt0_1") id(cellt0_1).publish_state(value);
              else if (param_name == "TempMax") id(tempmax).publish_state(value);
              else if (param_name == "TempMin") id(tempmin).publish_state(value);
              else if (param_name == "ChipV1") id(chipv1).publish_state(value);
              else if (param_name == "ChipV2") id(chipv2).publish_state(value);
              else if (param_name == "ChipV3") id(chipv3).publish_state(value);
              else if (param_name == "ChipV4") id(chipv4).publish_state(value);
              else if (param_name == "ChipV5") id(chipv5).publish_state(value);
              else if (param_name == "ChipV6") id(chipv6).publish_state(value);
              else if (param_name == "ChipV7") id(chipv7).publish_state(value);
              else if (param_name == "ChipV8") id(chipv8).publish_state(value);
              else if (param_name == "Chip1_5V") id(chip1_5v).publish_state(value);
              else if (param_name == "Chip2_5V") id(chip2_5v).publish_state(value);
              else if (param_name == "Chip1Cells") id(chip1cells).publish_state(value);
              else if (param_name == "Chip2Cells") id(chip2cells).publish_state(value);
              else if (param_name == "Chip3Cells") id(chip3cells).publish_state(value);
              else if (param_name == "Chip4Cells") id(chip4cells).publish_state(value);
              
              // Handle cell voltages (u1-u108) - simplified for now
              else if (param_name.substr(0, 1) == "u" && param_name.length() <= 4) {
                // For now, just log cell voltages
                ESP_LOGD("TeslaBMS", "Cell %s: %.0f mV", param_name.c_str(), value);
              }
            }

# Interval to periodically request parameters
interval:
  - interval: 5s
    then:
      - uart.write:
          id: tesla_bms_uart
          data: "param list\n"

# Display automation to update LCD
automation:
  - trigger:
      platform: time
      seconds: "/5"  # Every 5 seconds
    action:
      - display.page.show: main_page
      
  - trigger:
      platform: sensor
      id: balance
    action:
      - switch.turn_on: balance_control
        if:
          condition:
            sensor.numeric_state:
              id: balance
              above: 0.5
      - switch.turn_off: balance_control
        if:
          condition:
            sensor.numeric_state:
              id: balance
              below: 0.5

# Display pages
display:
  - platform: st7789
    id: lcd_display
    width: 240
    height: 320
    rotation: 270
    data_pins: [GPIO23, GPIO19, GPIO18, GPIO5, GPIO4, GPIO2, GPIO1, GPIO0]
    dc_pin: GPIO15
    cs_pin: GPIO14
    reset_pin: GPIO13
    backlight_pin: GPIO12
    reset_duration: 100ms
    auto_clear_enabled: false
    
    pages:
      - id: main_page
        lambda: |-
          // Clear display
          it.fill(COLOR_OFF);
          
          // Title
          it.printf(10, 10, id(font_large), COLOR_ON, "Tesla BMS Status");
          
          // System info
          it.printf(10, 40, id(font_medium), COLOR_ON, "Cells: %d/%d", 
                   id(cellspresent).state, id(cellsbalancing).state);
          
          // Voltage info
          it.printf(10, 70, id(font_medium), COLOR_ON, "Max: %.3fV (Cell %d)", 
                   id(umax).state / 1000.0, id(cellmax).state);
          it.printf(10, 95, id(font_medium), COLOR_ON, "Min: %.3fV (Cell %d)", 
                   id(umin).state / 1000.0, id(cellmin).state);
          it.printf(10, 120, id(font_medium), COLOR_ON, "Delta: %.3fV", 
                   id(deltav).state / 1000.0);
          
          // Temperature
          it.printf(10, 150, id(font_medium), COLOR_ON, "Temp: %.1f°C", 
                   id(chipt0).state);
          
          // Balance status
          it.printf(10, 180, id(font_medium), 
                   id(balance).state > 0.5 ? COLOR_GREEN : COLOR_RED, 
                   "Balance: %s", id(balance).state > 0.5 ? "ON" : "OFF");
          
          // Loop info
          it.printf(10, 210, id(font_small), COLOR_ON, "Loop: %d (State: %d)", 
                   id(loopcnt).state, id(loopstate).state);
          
          // Connection status
          it.printf(10, 230, id(font_small), COLOR_ON, "Connected: %s", 
                   id(display_status).state ? "Yes" : "No");
          
          // Last update time
          auto time = id(sntp_time).now();
          if (time.is_valid()) {
            it.printf(10, 250, id(font_small), COLOR_ON, "%02d:%02d:%02d", 
                     time.hour, time.minute, time.second); 